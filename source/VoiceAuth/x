File ChkauthControls.cpp:
 DCMan->Add(IDC_CHECKNUMBER,CHECKNUMBER_LEN,FN_CHECKNUMBER,MID_CHECKNUMBER);
 DCMan->Add(IDC_NAME,NAME_LEN,FN_CONSUMERNAME,MID_NAME)->
 DCMan->Add(IDC_ABA,ABA_LEN,FN_BANKNUMBER,MID_BANKNUMBER);
 DCMan->Add(IDC_ACCOUNT,ACCOUNT_LEN,FN_BANKACCOUNT,MID_BANKACCOUNT);
 DCMan->Add(IDC_DOB,DOB_LEN,FN_DOB,MID_DOB);
 DCMan->Add(IDC_LICENSE,LICENSE_LEN,FN_LICENSE,MID_LICENSE);
 DCMan->Add(IDC_MERCHNUM,MERCHNUM_LEN,FN_MERCHID,MID_MERCHNUM);
 DCMan->Add(IDC_CITY,CITY_LEN,FN_CITY,MID_CITY);
 DCMan->Add(IDC_ZIPCODE,ZIPCODE_LEN,FN_ZIPCODE,MID_ZIPCODE);
 DCMan->Add(IDC_ADDRESS,ADDRESS_LEN*2,FN_ADDRESS,MID_ADDRESS);
 DCMan->Add(IDC_BUSINESSNAME,BUSINESSNAME_LEN,FN_BUSINESSNAME,MID_BUSINESSNAME);
 DCMan->Add(IDC_PHONE,PHONE_LEN,FN_PHONE,MID_PHONE);
 DCMan->Add(IDC_SSN,SSN_LEN,FN_SSN,MID_SSN);
 DCMan->Add(IDC_AMOUNT,AMOUNT_LEN,FN_AMOUNT,MID_AMOUNT)->
                  FN_LICENSESTATE,MID_LICENSESTATE);
                  FN_CONSUMERSTATE,MID_CONSUMERSTATE);
 DCMan->AddComboBox(IDC_CHECKTYPE,FN_CHECKTYPE,MID_CHECKTYPE);
                    MID_TRANSPORTMETHOD);
 DCMan->AddComboBox(IDC_PRODUCTCLASS,FN_PRODUCTCLASS,MID_PRODUCTCLASS,
 DCMan->AddComboBox(IDC_PRIVATELABEL,FN_PRIVATELABEL,MID_PRIVATELABEL);
 DCMan->AddComboBox(IDC_TITLE,FN_TITLE,MID_TITLE);
 DCMan->AddComboBox(IDC_APARTMENT,FN_APARTMENT,MID_APARTMENT);
File ChkauthDialog.cpp:
 Instruct->Say(MID_START);
            Instruct->Say(MID_APPROVAL);
            Instruct->Say(MID_DECLINED);
     Instruct->Say(MID_REFERRALNUM);
       Instruct->Say(MID_VERIFYREFERRAL);
   DCMan->SetFocus(FN_AMOUNT,MID_INVALIDAMOUNT);
 Instruct->Say(MID_GETTINGMERCHANT);
   DCMan->SetFocus(IDC_MERCHNUM,MID_NOMERCHANT);
   DCMan->SetFocus(IDC_MERCHNUM,MID_NODATAREQ);
   DCMan->SetFocus(IDC_MERCHNUM,MID_NOAUTHRULES);
   DCMan->SetFocus(IDC_MERCHNUM,MID_INVALIDMERCHID);
 Instruct->Say(MID_GETTINGMERCHANT);
   DCMan->SetFocus(IDC_MERCHNUM,MID_NOMERCHANT);
   DCMan->SetFocus(IDC_MERCHNUM,MID_NODATAREQ);
   DCMan->SetFocus(IDC_MERCHNUM,MID_NOAUTHRULES);
   Instruct->Say(MID_ISPREAUTHQUERY);
   case FN_MERCHID: return MID_INVALIDMERCHID;
   case FN_AMOUNT: return MID_INVALIDAMOUNT;
       return MID_INVALIDHOLDCHECKTYPE;
       return MID_INVALIDCHECKTYPE;
   case FN_LICENSESTATE: return MID_INVALIDLICENSESTATE;
   case FN_LICENSE: return MID_INVALIDLICENSE;
   case FN_DOB: return MID_INVALIDDOB;
   case FN_CHECKNUMBER: return MID_INVALIDCHECKNUMBER;
   case FN_CONSUMERNAME: return MID_INVALIDCONSUMERNAME;
   case FN_ADDRESS: return MID_INVALIDADDRESS;
   case FN_APARTMENT: return MID_INVALIDAPARTMENT;
   case FN_CITY: return MID_INVALIDCITY;
   case FN_CONSUMERSTATE: return MID_INVALIDCONSUMERSTATE;
   case FN_ZIPCODE: return MID_INVALIDZIPCODE;
   case FN_PHONE: return MID_INVALIDPHONE;
   case FN_SSN: return MID_INVALIDSSN;
   case FN_PRODUCTCLASS: return MID_INVALIDPRODUCTCLASS;
   case FN_TRANSPORTMETHOD: return MID_INVALIDTRANSPORTMETHOD;
   case FN_BUSINESSNAME: return MID_INVALIDBUSINESSNAME;
   case FN_PRIVATELABEL: return MID_INVALIDPRIVATELABEL;
   case FN_TITLE: return MID_INVALIDTITLE;
   case FN_BANKNUMBER: return MID_INVALIDBANKNUMBER;
   case FN_BANKACCOUNT: return MID_INVALIDBANKACCOUNT;
   default: return MID_INVALIDUNKNOWN;
 Instruct->Say(MID_SENDINGAUTHREPLY);
 Instruct->Say(MID_APPROVAL);
 Instruct->Say(MID_SENDINGAUTHREPLY);
 Instruct->Say(MID_SENDINGAUTHREQ);
   Instruct->Say(MID_NORESPONSETOAUTHREQ);
   Instruct->Say(MID_INVALIDKENWOODMERCHANT);
 Instruct->Say(MID_PREAUTHFETCH);
 Instruct->Say(MID_PREAUTHFETCH);
 Instruct->Say(MID_LOGGINGTRANSACTION);
 Instruct->Say(MID_SENDINGHOLDCHECKTRANS);
 Instruct->Say(MID_APPROVALS);
 Instruct->Say(MID_SENDINGHOLDCHECKTRANS);
 Instruct->Say(MID_DECLINED);
File ChkauthDlg.cpp:
 Instruct->Say(MID_START);
 Instruct->Say(MID_GETMERCHANT);
     Instruct->Say(MID_GETREFERRALNUM);
File DecisionDialog.cpp:
 msgWin->Say(MID_SENDINGAUTHREPLY);
     msgWin->Say(MID_SENDINGPREAUTH);
   case RCODE_KENWOOD1: sayID= numRcodes ? MID_DECIDEKW1RCODES:
                                              MID_DECIDEKW1;
   case RCODE_KENWOOD2: sayID= numRcodes ? MID_DECIDEKW2RCODES:
                                              MID_DECIDEKW2;
   case RCODE_KENWOOD3: sayID= numRcodes ? MID_DECIDEKW3RCODES:
                                              MID_DECIDEKW3;
   case RCODE_KENWOOD4: sayID= numRcodes ? MID_DECIDEKW4RCODES:
                                              MID_DECIDEKW4;
   case RCODE_KENWOOD5: sayID= numRcodes ? MID_DECIDEKW5RCODES:
                                              MID_DECIDEKW5;
   case RCODE_R1DECLINE: sayID = (numRcodes>1) ? MID_DECIDEMULTIRCODES:
                                                  MID_DECIDER1;
   case RCODE_R2DECLINE: sayID = (numRcodes>1) ? MID_DECIDEMULTIRCODES:
                                                  MID_DECIDER2;
   case RCODE_R3DECLINE: sayID = (numRcodes>1) ? MID_DECIDEMULTIRCODES:
                                                  MID_DECIDER3;
   case RCODE_R4DECLINE: sayID = (numRcodes>1) ? MID_DECIDEMULTIRCODES:
                                                  MID_DECIDER4;
   case RCODE_R5DECLINE: sayID = (numRcodes>1) ? MID_DECIDEMULTIRCODES:
                                                  MID_DECIDER5;
   case RCODE_R6DECLINE: sayID = (numRcodes>1) ? MID_DECIDEMULTIRCODES:
                                                  MID_DECIDER6;
   case RCODE_R7DECLINE: sayID = (numRcodes>1) ? MID_DECIDEMULTIRCODES:
                                                  MID_DECIDER7;
   case RCODE_R8DECLINE: sayID = (numRcodes>1) ? MID_DECIDEMULTIRCODES:
                                                  MID_DECIDER8;
                        sayID = MID_DECIDEMULTIPREAUTHS; break;
                        sayID = numRcodes ? MID_DECIDELOSTSTOLENRCODES :
                                  MID_DECIDELOSTSTOLEN;
                        sayID = MID_DECIDEPREAUTHEXCEEDED; break;
   default:  sayID=MID_DECIDEGENERIC; break;
   msgWin->Say(MID_SSNSCORE);
   msgWin->Say(MID_CONSUMERPHONEVERIFY);
   msgWin->Say(MID_EMPLOYERPHONEVERIFY);
  msgWin->Say(MID_NOVERIFYCHECK);
File EmployerDialog.cpp:
#define EDITCTL(n,len,group) DCMan->Add(IDC_##n,len,FN_##n,MID_HC##n,group)
#define SPOUSECTL(n,len) DCMan->Add(IDC_##n,len,FN_##n,MID_HC##n,SPOUSEGROUP);\
#define EMPCTL(n,len) DCMan->Add(IDC_##n,len,FN_##n,MID_HC##n,EMPLOYERGROUP);\
  DCMan->AddComboBox(IDC_SPOUSEINFO,FN_SPOUSEINFO,MID_HCSPOUSEINFO);
   DCMan->SetFocus(IDC_EMPLOYERPHONE,MID_INVALIDPHONE);
   DCMan->SetFocus(IDC_SPOUSESSN,MID_INVALIDSSN);
   DCMan->SetFocus(IDC_SPOUSEEMPLOYERPHONE,MID_INVALIDPHONE);
File HCMSGID.PRT.cpp:
#define MID_HCSPOUSESSN 86
#define MID_HCSPOUSENAME 87
#define MID_HCSPOUSESALARY 88
#define MID_HCSPOUSEEMPLOYERPHONE 89
#define MID_HCSPOUSEEMPLOYERADR3 90
#define MID_HCSPOUSEEMPLOYERADR2 91
#define MID_HCSPOUSEEMPLOYERADR1 92
#define MID_HCSPOUSEEMPLOYERNAME 93
#define MID_HCSALARY 94
#define MID_HCEMPLOYERPHONE 95
#define MID_HCEMPLOYERADR3 96
#define MID_HCEMPLOYERADR2 97
#define MID_HCEMPLOYERADR1 98
#define MID_HCEMPLOYERNAME 99
#define MID_HCAMOUNT4 100
#define MID_HCAMOUNT3 101
#define MID_HCAMOUNT2 102
#define MID_HCAMOUNT1 103
#define MID_HCVEHICLEVALUE 104
#define MID_HCAMOUNT1TOOLOW 105
#define MID_HCSUMTOOHIGH 106
#define MID_HCAMOUNTNOTUNIQUE 107
#define MID_HCSPOUSEINFO 108
#define MID_SENDINGHOLDCHECKAPPROVALS 109
#define MID_APPROVALS 110
File HoldCheckDialog.cpp:
#define EDITCTL(n,len) DCMan->Add(IDC_HC##n,len,FN_##n,MID_HC##n)
#define EDITAMT(n,fn) DCMan->Add(IDC_HC##n,10,fn,MID_HC##n)->\
#define EDITCKNUM(n,fn) DCMan->Add(IDC_HC##n,7,fn,MID_HC##n)
  DCMan->Add(IDC_HCVEHICLEVALUE,10,FN_VEHICLEVALUE,MID_HCVEHICLEVALUE)->
  DCMan->AddButton(IDC_COMPLETEBTN,MID_ENTERTOCOMPLETE);
   DCMan->SetFocus(IDC_HCAMOUNT1,MID_HCAMOUNT1TOOLOW);
   DCMan->SetFocus(IDC_HCAMOUNT2,MID_HCAMOUNTNOTUNIQUE);
   DCMan->SetFocus(IDC_HCAMOUNT3,MID_HCAMOUNTNOTUNIQUE);
   DCMan->SetFocus(IDC_HCAMOUNT4,MID_HCAMOUNTNOTUNIQUE);
   DCMan->SetFocus(id,MID_HCSUMTOOHIGH);
     DCMan->SetFocus(FN_HOLDCHECKCHECKNUM2,MID_CHECKNUMNOTUNIQUE);
     DCMan->SetFocus(FN_HOLDCHECKCHECKNUM3,MID_CHECKNUMNOTUNIQUE);
     DCMan->SetFocus(FN_HOLDCHECKCHECKNUM4,MID_CHECKNUMNOTUNIQUE);
