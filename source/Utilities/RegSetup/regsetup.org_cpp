// This program Sets up the Registry for the SPS System
#define STRICT        
#include <windows.h>
#include <iostream.h>

//---------------------
// Set Up Event Logging
//---------------------
bool SetupEventLogging(void) {

  HKEY  hk;
  DWORD dwData;
  CHAR  szBuf[80];
  int   ret;
  bool  success=true;

/*
 * Add your source name as a subkey under the Application
 * key in the EventLog service portion of the registry.
 */

 if ((ret=RegCreateKey(HKEY_LOCAL_MACHINE,
      "SYSTEM\\CurrentControlSet\\Services\\EventLog\\Application\\SPS",
      &hk)) != ERROR_SUCCESS)
  {
   cout << "Error Creating EventLog\\Application\\SPS Key - "
        << "RegcreateKey Returned " << ret << "\n";
   success=false;
  }

 /* Set the Event ID message-file name. */


 // strcpy(szBuf, "%SystemRoot%\\System\\SPSMSG.dll");
    strcpy(szBuf, "D:\\PROGRAMS\\MESSAGES.DLL");

  /* Add the Event ID message-file name to the subkey. */


  if ((ret=RegSetValueEx(hk,             /* subkey handle         */
          "EventMessageFile",       /* value name            */
          0,                        /* must be zero          */
          REG_EXPAND_SZ,            /* value type            */
          (LPBYTE) szBuf,           /* address of value data */
          strlen(szBuf) + 1))!=ERROR_SUCCESS)       /* length of value data  */
   {
    cout << "Error Creating EventMessageFile Key - " <<
            "RegSetValueEx returned " << ret << "\n";
    success=false;
   }

/* Set the supported types flags. */


dwData = EVENTLOG_ERROR_TYPE | EVENTLOG_WARNING_TYPE |
    EVENTLOG_INFORMATION_TYPE;

if ((ret=RegSetValueEx(hk,      /* subkey handle                */
        "TypesSupported",  /* value name                   */
        0,                 /* must be zero                 */
        REG_DWORD,         /* value type                   */
        (LPBYTE) &dwData,  /* address of value data        */
        sizeof(DWORD))) != ERROR_SUCCESS)    /* length of value data         */
 {
  cout << "Error Creating TypesSupported Key - " <<
          "RegSetValueEx returned " << ret << "\n";
  success=false;
 }

 RegCloseKey(hk);
 return success;
}

//-------------------------
// SetUp IPCINFO Parameters
//-------------------------
bool SetupIPCInfo(DWORD NumBufs,char *LogServerName,char *LogSourceName)
{
 bool success=true;
 int  ret;
 HKEY hk;

 if ((ret=RegCreateKey(HKEY_LOCAL_MACHINE,
      "SOFTWARE\\IPCInfo",&hk)) != ERROR_SUCCESS)
  {
   cout << "Error Creating IPCInfo Key. RegcreateKey Returned " <<
      ret << "\n";
   success=false;
  }

 /* Set the NumBufs Value. */

 if ((ret=RegSetValueEx(hk,      /* subkey handle                */
        "NumBufs",          /* value name                   */
        0,                  /* must be zero                 */
        REG_DWORD,          /* value type                   */
        (LPBYTE) &NumBufs,  /* address of value data        */
        sizeof(DWORD))) != ERROR_SUCCESS)    /* length of value data         */
 {
  cout << "Error Creating NumBufs Key - " <<
          "RegSetValueEx returned " << ret << "\n";
  success=false;
 }

 /* Set the LogServerName Value. */

 if ((ret=RegSetValueEx(hk,      /* subkey handle                */
        "LogServerName",          /* value name                   */
        0,                  /* must be zero                 */
        REG_SZ,            /* value type                   */
        (LPBYTE)LogServerName,  /* address of value data        */
        strlen(LogServerName)+1)) != ERROR_SUCCESS)    /* length of value data         */
 {
  cout << "Error Creating LogServerName Key - " <<
          "RegSetValueEx returned " << ret << "\n";
  success=false;
 }

 // Set the LogSourceName Value.

 if ((ret=RegSetValueEx(hk,      /* subkey handle                */
        "LogSourceName",          /* value name                   */
        0,                  /* must be zero                 */
        REG_SZ,            /* value type                   */
        (LPBYTE)LogSourceName,  /* address of value data        */
        strlen(LogSourceName)+1)) != ERROR_SUCCESS)    /* length of value data         */
 {
  cout << "Error Creating LogSourceName Key - " <<
          "RegSetValueEx returned " << ret << "\n";
  success=false;
 }


 RegCloseKey(hk);
 return( success );
}

bool setStringValue(HKEY hk,char* ValueName,char* String)
{
 int ret;
 
 // Set the LogSourceName Value.

 if ((ret=RegSetValueEx(hk,      /* subkey handle                */
        ValueName,
        0,                  /* must be zero                 */
        REG_SZ,            /* value type                   */
        (LPBYTE)String,  /* address of value data        */
        strlen(String)+1)) != ERROR_SUCCESS)    /* length of value data         */
 {
  cout << "Error Creating " << ValueName <<
          "RegSetValueEx returned " << ret << "\n";
  return false;
 }

 return true;
}


//---------------
// Setup NETROUTE
//---------------
bool SetupNetRoute()
{
 int  ret;
 HKEY hk;
 DWORD Port=20001;

 // Create the key
 if ((ret=RegCreateKey(HKEY_LOCAL_MACHINE,
      "SOFTWARE\\NetRoute",&hk)) != ERROR_SUCCESS)
  {
   cout << "Error Creating NetRoute Key. RegcreateKey Returned " <<
      ret << "\n";
   return false;
  }

  /* Set the NumBufs Value. */

 if ((ret=RegSetValueEx(hk,      /* subkey handle                */
        "ServerPort",          /* value name                   */
        0,                  /* must be zero                 */
        REG_DWORD,          /* value type                   */
        (LPBYTE) &Port,  /* address of value data        */
        sizeof(DWORD))) != ERROR_SUCCESS)    /* length of value data         */
 {
  cout << "Error Creating ServerPort Value - " <<
          "RegSetValueEx returned " << ret << "\n";
  return false;
 }

 return true;
}


#define SET(name,value) if ( ! setStringValue(hk,name,value) ) return false
//---------------------------
// Setup Voice Authorizations
//---------------------------
bool SetupVoiceAuth(char* Type)
{
 int ret;
 HKEY hk;

 if ( *Type != 'W' &&
      *Type != 'T' )
  return true;

 // Create the key
 if ((ret=RegCreateKey(HKEY_LOCAL_MACHINE,
      "SOFTWARE\\VoiceAuth",&hk)) != ERROR_SUCCESS)
  {
   cout << "Error Creating VoiceAuth Key. RegcreateKey Returned " <<
      ret << "\n";
   return false;
  }

 if ( *Type=='W' )
  {
   SET("MessageFile","D:\\SPS\\DATABASE\\VoiceMsg.Dat");
  }
 else
  {
   SET("MessageFile","D:\\SPS\\DATABASE\\VoiceMsg.Dat");
  }

 return true;
}

//---------------------------
// Setup Logical Destinations
//---------------------------
bool SetupLogicalDestinations(char *Type)
{
 int  ret;
 HKEY hk;

 // Create the key
 if ((ret=RegCreateKey(HKEY_LOCAL_MACHINE,
      "SOFTWARE\\IPCLogicalNames",&hk)) != ERROR_SUCCESS)
  {
   cout << "Error Creating IPCLogicalNames Key. RegcreateKey Returned " <<
      ret << "\n";
   return false;
  }

 // Add the destinations
 if ( *Type=='W' )
  {
   SET("ManagerDB","ManageDB");
   SET("PREAUTHDEST","PREAUTH");
   SET("REFERRALQUEUE","REFQUE");
   SET("VOICEAUTH","KWSERV1.ANY");
   SET("SPSLOGGER","SPSLOG");
   SET("POSITIVEFILE","POSFILE");
   SET("BANKPHONEFILE","BANKPHON");
   SET("LISTMANAGER","MANAGEDB");
  }
 else
 if ( *Type=='T' )
  {
   SET("ManagerDB","JHESERV1.ManageDB");
   SET("PREAUTHDEST","JHESERV1.PREAUTH");
   SET("REFERRALQUEUE","JHESERV1.REFQUE");
   SET("VOICEAUTH","JHESERV1.KDSTEST");
   SET("SPSLOGGER","JHESERV1.SPSLOG");
   SET("POSITIVEFILE","JHESERV1.POSFILE");
   SET("BANKPHONEFILE","JHESERV1.BANKPHON");
   SET("LISTMANAGER","JHESERV1.MANAGEDB");
  }
 else
  {
   SET("CHKAUTH","ManageDB");
   SET("MANDBPOSAUTH","POSAUTH");
   SET("MANDBREPLY","REPLY");
   SET("MANDBVOICEAUTH","REPLY");
   SET("POSAUTHDEST","MANAGEDB");
   SET("POSRESPONSE","REPLY");
   SET("PREAUTHDEST","PREAUTH");
   SET("PREAUTHREPLY","REPLY");
   SET("REFERRALQUEUE","REFQUE");
   SET("REFQUEUEREPLY","REPLY");
   SET("POSITIVEFILE","POSFILE");
   SET("BANKPHONEFILE","BANKPHON");
   SET("LISTMANAGER","MANAGEDB");
  }

 return true;
}

//--------------
// Main Function
//--------------
void main(int argc,char* argv[])
{
 char *setupType="WorkStation";

 if ( argc > 1 )
  {
   strupr(argv[1]);
   if (argv[1][0]=='S')
    setupType="Server";
   else
   if ( argv[1][0]=='T')
    setupType="Test";
   else
   if ( argv[1][0] != 'W' )
    {
     cout << "Usage is regsetup [W(orkstation) or S(erver) or T(est)]";
     exit(EXIT_FAILURE);
    }
  }

 if ( SetupEventLogging() &&
      SetupIPCInfo(10,"LOCAL","SPS") &&
      SetupNetRoute() &&
      SetupVoiceAuth(setupType) &&
      SetupLogicalDestinations(setupType) )
 {
  cout << "Registry SETUP complete (" << setupType << ")\n";
  exit(EXIT_FAILURE);
 }
 else
  cout << "*** At Least One Registry Function Failed ***\n";

 exit(EXIT_SUCCESS);
}
